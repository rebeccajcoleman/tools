# template used to generate attack script

from string import ascii_lowercase
from string import ascii_uppercase
import urllib.request
import urllib.parse
from socket import timeout

def attack(url, payload):


    ###### YOU NEED TO WRITE CODE HERE TO ADD PAYLOAD TO YOUR urllib.request CALLS

    # edit the data sent via post
    post_data = urllib.parse.urlencode({'field1': 'value1', 'field2': 'value2'}).encode('ascii')

    # set up headers based on data from create-attack.py
    headers = {}
    cookie = '%%COOKIE%%'
    authorization = '%%AUTH%%'
    user_agent = '%%USER-AGENT%%'
    if cookie:
        headers['COOKIE'] = cookie

    if authorization:
        headers['Authorization'] = authorization 

    # possibly allow user to randomize user_agent values in future updates
    if user_agent:
        headers['User-Agent'] = user_agent
    else:
        headers['User-Agent'] = 'Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:81.0) Gecko/20100101 Firefox/81.0'

    # make sure connection works
    try: 
        req = urllib.request.Request(url=url, data=post_data, headers=headers)
        
        ###### IF YOU ARE USING TIMING ERRORS TO DETECT SQL INJECTION, ADJUST timeout=3 TO MEET YOUR NEEDS
        resp = urllib.request.urlopen(req, timeout=3)

    except timeout:

        ###### IF YOU ARE USING TIMING ERRORS TO DETECT SQL INJECTION, ADJUST THIS CODE TO MEET YOUR NEEDS
        print('Timeout error against url: ' + str(url))
        return

    except Exception as e:
        print('Against url: ' + str(url))
        print('Other error: ' + str(e))
        return

    ###### IF YOU ARE LOOKING FOR CONTENT TO IDENTIFY SUCCESS, ADJUST THIS CODE TO MEET YOUR NEEDS
    # check contents for particular content
    # use > -1 to check for content to exist
    # use == -1 t check for content not existing
    contents = resp.read()
    if contents.find(b'STRING TO SEARCH FOR')>-1:
        print('content found') 
    return


def main():

    ###### YOU NEED TO WRITE CODE HERE TO ADD PAYLOAD TO YOUR urllib.request CALLS
    ###### EITHER AS GET PARAM ON URL
    ###### OR IN post_data SET UP AROUND LINE 26

    # populated from create-attack.py
    protocol = '%%PROTO%%' 
    url = '%%URL%%' 
    port = '%%PORT%%'
    page = '%%PAGE%%'

    # build url with protocol and port
    url = protocol + '://' + url
    if port:
        url = url + ':' + str(port)
    url = url + '/' + page

    ##### May need to create many payloads so these next lines may land in a for loop or two
    payload = ''
    # NEEDS CODE TO PERFORM ATTACK NOW THAT WE HAVE URL AND CONNECTION CODE AVAILABLE
    attack(url, payload)

if __name__ == "__main__":
    main()
